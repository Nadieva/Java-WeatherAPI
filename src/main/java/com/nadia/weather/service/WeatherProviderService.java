package com.nadia.weather.service;

import com.nadia.weather.entity.weather.WeatherProvider;
import com.nadia.weather.repository.weather.WeatherProviderRepository;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.WebTarget;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

@Service
public class WeatherProviderService {

    // This means to get the bean called WeatherProviderRepository // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private WeatherProviderRepository forecasts;
    //Open  weather API
    private String OpenWeather_apiKey = "c5ffcae4ae91c9562d2bf20871d73113";
    private String OpenWeather_baseUrl = "https://api.openweathermap.org/data/2.5/weather?apiKey=" + OpenWeather_apiKey + "&q=";//url to get weather data about a city
    private String open_provider_name = "OPEN WEATHER MAP";

    //Accu weather API
    private String AccuWeather_apiKey = "Idv0ATJGgFozkNciqNhRE2f65AJUJHk";
    private String AccuWeather_baseUrlToGetCityId = "https://dataservice.accuweather.com/locations/v1/cities/search?apiKey=" + AccuWeather_apiKey + "&q=";
    private String AccuWeater_baseUrlToGetWeatherData = "http://dataservice.accuweather.com/currentconditions/v1/";
    private String accu_provider_name = "ACCU WEATHER";

    public Iterable<WeatherProvider> getAllWeatherForecasts() {
        return forecasts.findAll();
    }

    public List<WeatherProvider> getAllWeatherForecastsByCityAndCountry(String cityName, String country) {
            deleteAllProviders();
            List<WeatherProvider> list=new ArrayList<>();
            addWeatherForecastIntoDatabase(cityName, country);
            forecasts.findAll().forEach(list::add);
            return list;

    }

    public WeatherProvider updateWeatherProvider(WeatherProvider w) {
        WeatherProvider latestForecast = new WeatherProvider();
        Duration timeDifference = Duration.between(w.getLastUpdated(), LocalDateTime.now());

        //Open API - update weather forecast data if not updated for more than 1 hour
        if (w.getProviderName().equalsIgnoreCase(open_provider_name) && timeDifference.toHours() > 1) {
            latestForecast = findWeatherForecastByCityAndCountryFromOpenAPI(w.getCity(), w.getCountry());
            forecasts.save(latestForecast);
            forecasts.delete(w);
            return latestForecast;
        }

        //Accu API - update weather forecast data if not updated for more than 1 hour
        if (w.getProviderName().equalsIgnoreCase(accu_provider_name) && timeDifference.toHours() > 1) {
            latestForecast = findWeatherForecastByCityAndCountryFromAccuAPI(w.getCity(), w.getCountry());
            forecasts.save(latestForecast);
            forecasts.delete(w);
            return latestForecast;
        }

        return w;
    }

    public void addWeatherForecastIntoDatabase(String cityName, String country) {

        if (forecasts.count() == 0) {
            WeatherProvider wp = findWeatherForecastByCityAndCountryFromOpenAPI(cityName, country);
            forecasts.save(wp);
            //Accu API issue
            //wp = findWeatherForecastByCityAndCountryFromAccuAPI(cityName, country);
            //forecasts.save(wp);

        } else {
            for (WeatherProvider w : forecasts.findAll()) {
                if (w.getCity().equalsIgnoreCase(cityName) && w.getCountry().equalsIgnoreCase(country)) {
                    WeatherProvider wp = updateWeatherProvider(w);
                    forecasts.delete(w);
                    forecasts.save(wp);
                }
            }
        }
    }


    public WeatherProvider findWeatherForecastByCityAndCountryFromOpenAPI(String city, String country) {
        try {
            //open weather map
            System.out.println("----------------OPEN WEATHER MAP--------------------");
            String request = city + "," + country;
            Client client_ow = ClientBuilder.newClient();
            String uri_ow = OpenWeather_baseUrl + request;
            WebTarget target_ow = client_ow.target(uri_ow);
            String response_ow = target_ow.request(String.valueOf(MediaType.APPLICATION_JSON)).get(String.class);
            JSONObject jsonObject_ow = new JSONObject(response_ow);

            //temperature
            JSONObject mainJSONObject_ow = jsonObject_ow.getJSONObject("main");
            double tempKelvin = mainJSONObject_ow.getInt("temp");//getJSONNumber is not working //286.1 becomes 286.0?
            double tempCelsius = Math.round((tempKelvin - 273.15));
            //double tempFahrenheit = Math.round((tempKelvin - 32) * 5 / 9);
            //System.out.println("Temperature in " + city + "(" + country + ") :" + String.valueOf(tempFahrenheit) + "°F/" + String.valueOf(tempCelsius) + "°C");
            double minTempKelvin = mainJSONObject_ow.getInt("temp_min");
            double minTempCelsius = Math.round((minTempKelvin - 273.15));
            double maxTempKelvin = mainJSONObject_ow.getInt("temp_max");
            double maxTempCelsius = Math.round((maxTempKelvin - 273.15));

            //description
            JSONArray weatherJSONObjectArray = jsonObject_ow.getJSONArray("weather");
            JSONObject weatherJSONObject = weatherJSONObjectArray.getJSONObject(0);
            String description = weatherJSONObject.getString("main") + " - " +
                    weatherJSONObject.getString("description");
            System.out.println("Description :" + description);

            //visibility
            double visibility = jsonObject_ow.getInt("visibility");

            //humidity
            double humidity = mainJSONObject_ow.getInt("humidity");
            System.out.println("Humidity (%) :" + humidity);

            //pressure
            double pressure = mainJSONObject_ow.getInt("pressure");
            System.out.println("Pressure:" + pressure);

            //Wind
            //double windDegree = jsonObject_ow.getJSONObject("wind").getInt("deg");
            //  System.out.println("Wind degree:" + windDegree);
            double windSpeed = jsonObject_ow.getJSONObject("wind").getInt("speed");
            System.out.println("Wind speed (m/s) :" + windSpeed);


            //cloudiness
            double cloudiness = jsonObject_ow.getJSONObject("clouds").getInt("all");
            System.out.println("Cloudiness (%) :" + cloudiness);

            //subcountry
            //String subCountry = cityservice.getCity(city, country).getSubCountry();

            System.out.println("JSON response: " + response_ow);

            WeatherProvider wp = WeatherProvider.builder()
                    .providerName(open_provider_name)
                    .city(city)
                    //.subCountry(subCountry)
                    .country(country)
                    .summary(description)
                    .weatherDate(LocalDate.now())
                    .weatherTime(LocalTime.now())
                    .tempAverageInCelsius(String.valueOf(tempCelsius))
                    .minTemperatureInCelsius(String.valueOf(minTempCelsius))
                    .maxTemperatureInCelsius(String.valueOf(maxTempCelsius))
                    .humidity(String.valueOf(humidity))
                    .pressure(String.valueOf(pressure))
                    .visibility(String.valueOf(visibility))
                    .cloudiness(String.valueOf(cloudiness))
                    //.windDegree(String.valueOf(windDegree))
                    .windSpeed(String.valueOf(windSpeed))
                    .lastUpdated(LocalDateTime.now())
                    .build();
            System.out.println("\n\nweather provider : " + wp.toString());
            return wp;
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return null;
    }


    public WeatherProvider findWeatherForecastByCityAndCountryFromAccuAPI(String city, String country) {
        try {
            //accuweather
            System.out.println("\n\n-------------------ACCU WEATHER------------------------");
            String request = city + "," + country;
            //we know the weather of the city only if we know its key
            //Please get key of the city to know the weather in the city
            Client client_aw = ClientBuilder.newClient();
            String key_aw_uri = AccuWeather_baseUrlToGetCityId + request + "&language=en-us&details=true";
            WebTarget key_aw_target = client_aw.target(key_aw_uri);
            String key_response_aw = key_aw_target.request(String.valueOf(MediaType.APPLICATION_JSON)).get(String.class);
            JSONArray jsonArray = new JSONArray(key_response_aw);//this is a JSON array
            JSONObject jsonArrayObject = jsonArray.getJSONObject(0);
            String city_key = jsonArrayObject.getString("Key");
            String uri_aw = AccuWeater_baseUrlToGetWeatherData + city_key + "?apikey=" + AccuWeather_apiKey + "&language=en-us&details=true";
            WebTarget target_aw = client_aw.target(uri_aw);
            String response_aw = target_aw.request(String.valueOf(MediaType.APPLICATION_JSON)).get(String.class);
            JSONArray jsonArrayObject_aw = new JSONArray(response_aw);

            //local date time
            String datetime = jsonArrayObject_aw.getJSONObject(0).getString("LocalObservationDateTime");
            System.out.println("Local date and time in " + city + "(" + country + "): " + datetime);

            //temperature
            JSONObject tempJSONObject = jsonArrayObject_aw.getJSONObject(0).getJSONObject("Temperature");
            double tempCelsius = tempJSONObject.getJSONObject("Metric").getInt("Value");
            double tempFahrenheit = tempJSONObject.getJSONObject("Imperial").getInt("Value");
            System.out.println("Temperature in " + city + "(" + country + ") :" + tempFahrenheit + "°F/" + tempCelsius + "°C");

            //description
            String description = jsonArrayObject_aw.getJSONObject(0).getString("WeatherText");
            System.out.println("Description :" + description);

            //UV index
            double uvIndex = jsonArrayObject_aw.getJSONObject(0).getInt("UVIndex");
            System.out.println("UV index :" + uvIndex);

            //humidity
            double humidity = jsonArrayObject_aw.getJSONObject(0).getInt("RelativeHumidity");
            System.out.println("Humidity (%) :" + humidity);

            //Wind
            double windDegree = jsonArrayObject_aw.getJSONObject(0).getJSONObject("Wind").getJSONObject("Direction").getInt("Degrees");
            System.out.println("Wind degree :" + windDegree);

            double windSpeed = jsonArrayObject_aw.getJSONObject(0).getJSONObject("Wind").getJSONObject("Speed").getJSONObject("Metric").getInt("Value");
            System.out.println("Wind speed (km/h) :" + windSpeed);

            //cloudiness
            double cloudiness = jsonArrayObject_aw.getJSONObject(0).getInt("CloudCover");
            System.out.println("Cloudiness (%) :" + cloudiness);

            //visibility
            double visibility = jsonArrayObject_aw.getJSONObject(0).getJSONObject("Visibility").getJSONObject("Metric").getInt("Value");
            System.out.println("Visibility (km) :" + visibility);

            //pressure
            double pressure = jsonArrayObject_aw.getJSONObject(0).getJSONObject("Visibility").getJSONObject("Metric").getInt("Value");
            System.out.println("Pressure (mb) :" + pressure);

            System.out.println("JSON response: " + jsonArrayObject_aw.getJSONObject(0).toString());
            WeatherProvider wp = WeatherProvider.builder()
                    .providerName(accu_provider_name)
                    .city(city)
                    //.subCountry()
                    .country(country)
                    .summary(description)
                    .weatherDate(LocalDate.now())
                    .weatherTime(LocalTime.now())
                    .tempAverageInCelsius(String.valueOf(tempCelsius))
                    //.minTemperatureInCelsius()
                    // .maxTemperatureInCelsius()
                    .humidity(String.valueOf(humidity))
                    .pressure(String.valueOf(pressure))
                    .visibility(String.valueOf(cloudiness))
                    .cloudiness(String.valueOf(cloudiness))
                    .windDegree(String.valueOf(windDegree))
                    .windSpeed(String.valueOf(windSpeed))
                    .lastUpdated(LocalDateTime.now())
                    .build();

            return wp;
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return null;
    }

    public WeatherProvider getProviderById(Long id) {
        return forecasts.findById(id).get();
    }

    public void deleteProviderById(Long id) {
        forecasts.deleteById(id);
    }

    public void deleteAllProviders() {
        forecasts.deleteAll();
    }
}



